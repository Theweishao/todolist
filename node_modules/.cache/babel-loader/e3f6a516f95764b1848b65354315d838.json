{"ast":null,"code":"// 初始化state对象\nconst initState = {\n  todos: Array(7).fill(null).map((v, i) => ({\n    id: i,\n    title: 'reducer中标题' + i,\n    completed: false\n  }))\n};\n/**\r\n * reducer 函数，这个函数是一个纯函数\r\n * @param {*} state 旧的状态数据\r\n * @param {*} action 更新状态的动作对象，{type, payload} type表示动作类型，payload表示操作的数据\r\n * \r\n * @return 更新后的新的状态对象\r\n */\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'ADD_TODO_ITEM':\n      // 添加新待办事项\n      return { ...state,\n        todos: [...state.todos, action.payload] // JSON.parse(JSON.stringify(todos))\n\n      };\n\n    case 'TOGGLE_TODO_ITEM':\n      // 修改待办事项状态\n      return { ...state,\n        todos: state.todos.map(todo => {\n          const temp = { ...todo\n          }; // 纯函数不能造成副作用，所以将数组中的元素值复制一份再操作\n\n          if (temp.id === action.payload) {\n            temp.completed = !temp.completed;\n          }\n\n          return temp;\n        })\n      };\n\n    case 'REMOVE_TODO_ITEM':\n      // 删除待办事项\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      };\n\n    case 'CHANGED_TODO_ITEM':\n      // 编辑待办事项内容\n      return { ...state,\n        todos: state.todos.map(todo => {\n          const temp = { ...todo\n          }; // 纯函数不能造成副作用，所以将数组中的元素值复制一份再操作\n\n          if (temp.id === action.payload.id) {\n            temp.title = action.payload.title;\n          }\n\n          return temp;\n        })\n      };\n\n    default:\n      // 没有满足条件的动作，则直接返回原状态值\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["G:/HBproject/The third stage/React/h52005-react/To-do-list/src/reducers/todos.js"],"names":["initState","todos","Array","fill","map","v","i","id","title","completed","reducer","state","action","type","payload","todo","temp","filter"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,EAAoBC,GAApB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,MAAW;AACxCC,IAAAA,EAAE,EAAED,CADoC;AAExCE,IAAAA,KAAK,EAAE,eAAeF,CAFkB;AAGxCG,IAAAA,SAAS,EAAE;AAH6B,GAAX,CAAxB;AADS,CAAlB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGX,SAAT,EAAoBY,MAApB,KAA+B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AAAsB;AACpB,aAAO,EACL,GAAGF,KADE;AAELV,QAAAA,KAAK,EAAE,CACL,GAAGU,KAAK,CAACV,KADJ,EAELW,MAAM,CAACE,OAFF,CAFF,CAML;;AANK,OAAP;;AAQF,SAAK,kBAAL;AAAyB;AACvB,aAAO,EACL,GAAGH,KADE;AAELV,QAAAA,KAAK,EAAEU,KAAK,CAACV,KAAN,CAAYG,GAAZ,CAAgBW,IAAI,IAAI;AAC7B,gBAAMC,IAAI,GAAG,EAAC,GAAGD;AAAJ,WAAb,CAD6B,CACN;;AACvB,cAAIC,IAAI,CAACT,EAAL,KAAYK,MAAM,CAACE,OAAvB,EAAgC;AAC9BE,YAAAA,IAAI,CAACP,SAAL,GAAiB,CAACO,IAAI,CAACP,SAAvB;AACD;;AACD,iBAAOO,IAAP;AACD,SANM;AAFF,OAAP;;AAUF,SAAK,kBAAL;AAAyB;AACvB,aAAO,EACL,GAAGL,KADE;AAELV,QAAAA,KAAK,EAAEU,KAAK,CAACV,KAAN,CAAYgB,MAAZ,CAAmBF,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYK,MAAM,CAACE,OAA9C;AAFF,OAAP;;AAIF,SAAK,mBAAL;AAA0B;AACxB,aAAO,EACL,GAAGH,KADE;AAELV,QAAAA,KAAK,EAAEU,KAAK,CAACV,KAAN,CAAYG,GAAZ,CAAgBW,IAAI,IAAI;AAC7B,gBAAMC,IAAI,GAAG,EAAC,GAAGD;AAAJ,WAAb,CAD6B,CACN;;AACvB,cAAIC,IAAI,CAACT,EAAL,KAAYK,MAAM,CAACE,OAAP,CAAeP,EAA/B,EAAmC;AACjCS,YAAAA,IAAI,CAACR,KAAL,GAAaI,MAAM,CAACE,OAAP,CAAeN,KAA5B;AACD;;AACD,iBAAOQ,IAAP;AACD,SANM;AAFF,OAAP;;AAUF;AAAS;AACP,aAAOL,KAAP;AAtCJ;AAwCD,CAzCD;;AA2CA,eAAeD,OAAf","sourcesContent":["// 初始化state对象\r\nconst initState = {\r\n  todos: Array(7).fill(null).map((v, i) => ({\r\n    id: i,\r\n    title: 'reducer中标题' + i,\r\n    completed: false\r\n  }))\r\n}\r\n/**\r\n * reducer 函数，这个函数是一个纯函数\r\n * @param {*} state 旧的状态数据\r\n * @param {*} action 更新状态的动作对象，{type, payload} type表示动作类型，payload表示操作的数据\r\n * \r\n * @return 更新后的新的状态对象\r\n */\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO_ITEM': // 添加新待办事项\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos,\r\n          action.payload\r\n        ],\r\n        // JSON.parse(JSON.stringify(todos))\r\n      }\r\n    case 'TOGGLE_TODO_ITEM': // 修改待办事项状态\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => {\r\n          const temp = {...todo} // 纯函数不能造成副作用，所以将数组中的元素值复制一份再操作\r\n          if (temp.id === action.payload) {\r\n            temp.completed = !temp.completed\r\n          }\r\n          return temp\r\n        })\r\n      }\r\n    case 'REMOVE_TODO_ITEM': // 删除待办事项\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => todo.id !== action.payload)\r\n      }\r\n    case 'CHANGED_TODO_ITEM': // 编辑待办事项内容\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => {\r\n          const temp = {...todo} // 纯函数不能造成副作用，所以将数组中的元素值复制一份再操作\r\n          if (temp.id === action.payload.id) {\r\n            temp.title = action.payload.title\r\n          }\r\n          return temp\r\n        })\r\n      }\r\n    default: // 没有满足条件的动作，则直接返回原状态值\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}