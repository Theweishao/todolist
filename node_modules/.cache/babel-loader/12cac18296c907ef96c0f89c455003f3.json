{"ast":null,"code":"var _jsxFileName = \"G:\\\\HBproject\\\\The third stage\\\\React\\\\h52005-react\\\\To-do-list\\\\src\\\\components\\\\TodoInput.jsx\";\nimport React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodoItemAction } from '../actions/todos'; // import TodoInput.css \n\nclass TodoInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputValue: 'abc'\n    };\n    this.inputRef = createRef();\n\n    this.changeInputValueHandler = event => {\n      // 在组件中需要调用 setState() 方法来更新 state\n      // 中的状态数据，否则无法响应式渲染\n      this.setState({\n        inputValue: event.target.value\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"num:\", this.state.num), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u65B0\\u5F85\\u529E\\u4E8B\\u9879\",\n      value: this.state.inputValue,\n      onChange: this.changeInputValueHandler // ref=\"inputRef\"\n      ,\n      ref: this.inputRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        // 添加\n        this.props.add(this.state.inputValue); // 清空输入框\n\n        this.setState({\n          inputValue: ''\n        }); // 获得焦点\n\n        this.inputRef.current.focus();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"\\u6DFB\\u52A0\"));\n  }\n\n} // 将当前 TodoInput 组件与 store 连接\n\n\nconst mapStateToProps = null; // 将状态数据映射到组件的属性中\n\nconst mapDispatchToProps = dispatch => {\n  // 将分发action的动作方法映射到组件的属性中\n  return {\n    add: title => dispatch(addTodoItemAction(title))\n  };\n}; // connect() 连接\n\n\nconst hoc = connect(mapStateToProps, mapDispatchToProps); // 导出新组件\n\nexport default hoc(TodoInput);","map":{"version":3,"sources":["G:/HBproject/The third stage/React/h52005-react/To-do-list/src/components/TodoInput.jsx"],"names":["React","Component","createRef","connect","addTodoItemAction","TodoInput","state","inputValue","inputRef","changeInputValueHandler","event","setState","target","value","render","num","props","add","current","focus","mapStateToProps","mapDispatchToProps","dispatch","title","hoc"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CACA;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCK,KAFgC,GAExB;AACNC,MAAAA,UAAU,EAAE;AADN,KAFwB;AAAA,SAOhCC,QAPgC,GAOrBN,SAAS,EAPY;;AAAA,SAYhCO,uBAZgC,GAYNC,KAAK,IAAI;AACjC;AACA;AACA,WAAKC,QAAL,CAAc;AACZJ,QAAAA,UAAU,EAAEG,KAAK,CAACE,MAAN,CAAaC;AADb,OAAd;AAGD,KAlB+B;AAAA;;AAoBhCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAW,KAAKR,KAAL,CAAWS,GAAtB,CADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,kDAFd;AAGE,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWC,UAHpB;AAIE,MAAA,QAAQ,EAAE,KAAKE,uBAJjB,CAKE;AALF;AAME,MAAA,GAAG,EAAE,KAAKD,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAUE;AAAQ,MAAA,OAAO,EAAE,MAAM;AACrB;AACA,aAAKQ,KAAL,CAAWC,GAAX,CAAe,KAAKX,KAAL,CAAWC,UAA1B,EAFqB,CAGrB;;AACA,aAAKI,QAAL,CAAc;AACZJ,UAAAA,UAAU,EAAE;AADA,SAAd,EAJqB,CAOrB;;AACA,aAAKC,QAAL,CAAcU,OAAd,CAAsBC,KAAtB;AACD,OATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,CADF;AAuBD;;AA5C+B,C,CA+ClC;;;AACA,MAAMC,eAAe,GAAG,IAAxB,C,CAA6B;;AAC7B,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AAAE;AACvC,SAAO;AACLL,IAAAA,GAAG,EAAEM,KAAK,IAAID,QAAQ,CAAClB,iBAAiB,CAACmB,KAAD,CAAlB;AADjB,GAAP;AAGD,CAJD,C,CAKA;;;AACA,MAAMC,GAAG,GAAGrB,OAAO,CAACiB,eAAD,EAAkBC,kBAAlB,CAAnB,C,CACA;;AACA,eAAeG,GAAG,CAACnB,SAAD,CAAlB","sourcesContent":["import React, { Component, createRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodoItemAction } from '../actions/todos'\r\n// import TodoInput.css \r\n\r\nclass TodoInput extends Component {\r\n\r\n  state = {\r\n    inputValue: 'abc'\r\n  }\r\n\r\n  // 对象属性：创建 Ref 对象\r\n  inputRef = createRef()\r\n\r\n  /**\r\n   * 修改输入值\r\n   */\r\n  changeInputValueHandler = event => {\r\n    // 在组件中需要调用 setState() 方法来更新 state\r\n    // 中的状态数据，否则无法响应式渲染\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <span>num:{this.state.num}</span>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"请输入新待办事项\"\r\n          value={this.state.inputValue}\r\n          onChange={this.changeInputValueHandler}\r\n          // ref=\"inputRef\"\r\n          ref={this.inputRef}\r\n        />\r\n        <button onClick={() => {\r\n          // 添加\r\n          this.props.add(this.state.inputValue)\r\n          // 清空输入框\r\n          this.setState({\r\n            inputValue: ''\r\n          })\r\n          // 获得焦点\r\n          this.inputRef.current.focus()\r\n        }}>添加</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 将当前 TodoInput 组件与 store 连接\r\nconst mapStateToProps = null // 将状态数据映射到组件的属性中\r\nconst mapDispatchToProps = dispatch => { // 将分发action的动作方法映射到组件的属性中\r\n  return {\r\n    add: title => dispatch(addTodoItemAction(title))\r\n  }\r\n}\r\n// connect() 连接\r\nconst hoc = connect(mapStateToProps, mapDispatchToProps)\r\n// 导出新组件\r\nexport default hoc(TodoInput)\r\n"]},"metadata":{},"sourceType":"module"}