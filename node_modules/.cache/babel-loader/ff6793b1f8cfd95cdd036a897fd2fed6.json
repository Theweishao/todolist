{"ast":null,"code":"var _jsxFileName = \"G:\\\\HBproject\\\\The third stage\\\\React\\\\h52005-react\\\\To-do-list\\\\src\\\\components\\\\TodoItem.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes, { nominalTypeHack } from 'prop-types';\nimport { removeTodoItemAction, toggleTodoItemAction, changedTodoItemAction } from '../actions/todos';\nimport { connect } from 'react-redux';\nimport { Card, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport './Todoitem.css'; // 待办事项列表项\n\nclass TodoItem extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputValue: this.props.title\n    };\n\n    this.changedValue = event => {\n      // 在组件中需要调用 setState() 方法来更新 state\n      // 中的状态数据，否则无法响应式渲染\n      this.setState({\n        inputValue: event.target.value\n      });\n      console.log(this.state.inputValue);\n      console.log(this.props.title);\n    };\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      className: \"Card\",\n      title: \"\\u5F85\\u529E\\u4E8B\\u9879\",\n      extra: /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 54\n        }\n      }, completed ? '未' : '已'),\n      style: {\n        width: 300,\n        color: completed ? '#f00' : '#0f0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: this.changedValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        this.props.toggle(id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"\\u6807\\u8BB0\\u4E3A\", completed ? '未' : '已', \"\\u5B8C\\u6210\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        this.props.changed(id, this.state.inputValue);\n      },\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"\\u786E\\u5B9A\\u7F16\\u8F91\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        this.props.remove(id);\n      },\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"\\u5220\\u9664\"))));\n  }\n\n}\n\nTodoItem.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  completed: PropTypes.bool\n};\nTodoItem.defaultProps = {\n  id: 0,\n  title: '',\n  completed: false\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggle: id => dispatch(toggleTodoItemAction(id)),\n    remove: id => dispatch(removeTodoItemAction(id)),\n    changed: (id, title) => dispatch(changedTodoItemAction(id, title))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TodoItem);","map":{"version":3,"sources":["G:/HBproject/The third stage/React/h52005-react/To-do-list/src/components/TodoItem.jsx"],"names":["React","Component","ReactDOM","PropTypes","nominalTypeHack","removeTodoItemAction","toggleTodoItemAction","changedTodoItemAction","connect","Card","Button","TodoItem","state","inputValue","props","title","changedValue","event","setState","target","value","console","log","render","id","completed","width","color","toggle","changed","float","remove","propTypes","number","string","bool","defaultProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes, { nominalTypeHack } from 'prop-types'\r\nimport { removeTodoItemAction, toggleTodoItemAction, changedTodoItemAction } from '../actions/todos'\r\nimport { connect } from 'react-redux'\r\nimport { Card, Button  } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './Todoitem.css'\r\n\r\n// 待办事项列表项\r\nclass TodoItem extends Component {\r\n  static propTypes = {\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    completed: PropTypes.bool\r\n  }\r\n  static defaultProps = {\r\n    id: 0,\r\n    title: '',\r\n    completed: false\r\n  }\r\n  state = {\r\n    inputValue: this.props.title\r\n  }\r\n  changedValue = event => {\r\n    // 在组件中需要调用 setState() 方法来更新 state\r\n    // 中的状态数据，否则无法响应式渲染\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    })\r\n    console.log(this.state.inputValue)\r\n    console.log(this.props.title)\r\n\r\n  }\r\n  render() {\r\n    const { id, title, completed } = this.props\r\n    return (\r\n      <ul>\r\n      <li>\r\n        <>\r\n          <Card className=\"Card\" title=\"待办事项\" extra={<a href=\"#\">{completed?'未':'已'}</a>} style={{ width: 300,color: completed ? '#f00' : '#0f0' }}>\r\n          {/* <p contenteditable=\"true\">{title}</p> */}\r\n          <input type=\"text\" value={this.state.inputValue}  onChange={this.changedValue} />\r\n          </Card>\r\n        </>\r\n        <>\r\n          <Button type=\"primary\" onClick={() => { this.props.toggle(id)}}>标记为{completed?'未':'已'}完成</Button>\r\n\r\n          <Button type=\"primary\" onClick={() => { this.props.changed(id,this.state.inputValue)}} style={{ float:'right'}}>确定编辑</Button>\r\n          \r\n          <Button type=\"primary\" onClick={() => { this.props.remove(id)}} style={{ float:'right'}}>删除</Button>\r\n\r\n        </>\r\n      </li>\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggle: id => dispatch(toggleTodoItemAction(id)),\r\n    remove: id => dispatch(removeTodoItemAction(id)),\r\n    changed: (id,title) => dispatch(changedTodoItemAction(id,title))\r\n  }\r\n}\r\nexport default connect(null, mapDispatchToProps)(TodoItem)\r\n"]},"metadata":{},"sourceType":"module"}